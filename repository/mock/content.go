// Code generated by MockGen. DO NOT EDIT.
// Source: repository/content.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "peanut/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContentRepo is a mock of ContentRepo interface.
type MockContentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockContentRepoMockRecorder
}

// MockContentRepoMockRecorder is the mock recorder for MockContentRepo.
type MockContentRepoMockRecorder struct {
	mock *MockContentRepo
}

// NewMockContentRepo creates a new mock instance.
func NewMockContentRepo(ctrl *gomock.Controller) *MockContentRepo {
	mock := &MockContentRepo{ctrl: ctrl}
	mock.recorder = &MockContentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentRepo) EXPECT() *MockContentRepoMockRecorder {
	return m.recorder
}

// CreateContent mocks base method.
func (m *MockContentRepo) CreateContent(arg0 domain.Content) (*domain.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContent", arg0)
	ret0, _ := ret[0].(*domain.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContent indicates an expected call of CreateContent.
func (mr *MockContentRepoMockRecorder) CreateContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContent", reflect.TypeOf((*MockContentRepo)(nil).CreateContent), arg0)
}

// GetContents mocks base method.
func (m *MockContentRepo) GetContents() ([]domain.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents")
	ret0, _ := ret[0].([]domain.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContents indicates an expected call of GetContents.
func (mr *MockContentRepoMockRecorder) GetContents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockContentRepo)(nil).GetContents))
}
